/******************************************************************************************//* Function: DecodeKeys(ADValue)                                                          *//*  This function is optimized to minimize RAM usage.                                     *//*  PLEASE READ ALL COMMENTS, with no startup code, you will have to make modifications   *//*    Keypad specifications:  Keyswitch max resistance of 2 ohms.                         *//*       12 keys, 10 bit A/D converter with 7 counts of uncertainty.                      *//*       Using 1% resistors with a tempco of 100ppm                                       *//*       Operating over a temperature range of 10C to 40C                                 *//*       Resistors in keypad array were optimized for maximum key distinction             *//*                                                                                        *//*                                                                                        *//*     Low     Low       High    High                                                     *//*     Limit   Limit     Limit   Limit     KeyCode  Key Name                              *//*         0   0x0000     00007   0x7          10        KeyAsterisk                      *//*     00070   0x0046     00087   0x0057       07        Key7                             *//*     00149   0x0095     00169   0x00A9       04        Key4                             *//*     00216   0x00D8     00238   0x00EE       01        Key1                             *//*     00245   0x00F5     00267   0x010B       00        Key0                             *//*     00289   0x0121     00313   0x0139       08        Key8                             *//*     00337   0x0151     00361   0x0169       05        Key5                             *//*     00379   0x017B     00404   0x0194       02        Key2                             *//*     00418   0x01A2     00444   0x01BC       11        KeyHash                          *//*     00445   0x01BD     00471   0x01D7       09        Key9                             *//*     00475   0x01DB     00501   0x01F5       06        Key6                             *//*     00502   0x01F6     00528   0x0210       03        Key3                             *//*    With resistors:                                                                     *//*    To +3.0 --- 9.9k ---(To A/D input)--- 3.3k --- 3.9k                                 *//*                                     X         X         X                              *//*                 1k                  X         X         X                              *//*                 1k                  X         X         X                              *//*                 820                 X         X         X                              *//*                                                                                        *//*                                                                                        *//*   Keypad resistor values and C code Key decoder generated by                           *//*   1-Wire Keyboard 1.2.0b software from www.rau-deaver.org/Electronics                  *//******************************************************************************************/#include "Arduino.h"  #define  KeyAsterisk_LoLimit	0  #define  KeyAsterisk_HiLimit	7  #define  KeyAsterisk_KeyCode	10  #define  Key7_LoLimit	70  #define  Key7_HiLimit	87  #define  Key7_KeyCode	7  #define  Key4_LoLimit	149  #define  Key4_HiLimit	169  #define  Key4_KeyCode	4  #define  Key1_LoLimit	216  #define  Key1_HiLimit	238  #define  Key1_KeyCode	1  #define  Key0_LoLimit	245  #define  Key0_HiLimit	267  #define  Key0_KeyCode	0  #define  Key8_LoLimit	289  #define  Key8_HiLimit	313  #define  Key8_KeyCode	8  #define  Key5_LoLimit	337  #define  Key5_HiLimit	361  #define  Key5_KeyCode	5  #define  Key2_LoLimit	379  #define  Key2_HiLimit	404  #define  Key2_KeyCode	2  #define  KeyHash_LoLimit	418  #define  KeyHash_HiLimit	444  #define  KeyHash_KeyCode	11  #define  Key9_LoLimit	445  #define  Key9_HiLimit	471  #define  Key9_KeyCode	9  #define  Key6_LoLimit	475  #define  Key6_HiLimit	501  #define  Key6_KeyCode	6  #define  Key3_LoLimit	502  #define  Key3_HiLimit	528  #define  Key3_KeyCode	3#define  KeyThreshold	3    /* if a large capacitor is used on the A/D input pin, this number may have to be increased since the rise rate of the voltage may be so slow we could recognize it as the wrong key */#define  KeyNONE		255byte decodeKeys(word ADValue){static byte LastKeyCode = 255;  /* If you do not use startup code with a copy down initialization routine, you will have to make LastKeyCode a global and initialize after reset */static byte StableKeyCount = 0;  /* If you do not use startup code with a copy down initialization routine, you will have to make StableKeyCount a global and initialize after reset */byte KeyCode;KeyCode = KeyNONE;if (ADValue <= Key3_HiLimit){  if (ADValue > Key8_HiLimit )	{	  if (ADValue > KeyHash_HiLimit )		{		  if (ADValue > Key6_HiLimit )			{			/* Validate key Key3   (make sure we are also above the lower A/D limit)  */			if (ADValue >= Key3_LoLimit )			  {				KeyCode = Key3_KeyCode;			  }			  			 } 			  else			 { 			  if (ADValue > Key9_HiLimit )				{				/* Validate key Key6   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key6_LoLimit )				  {					KeyCode = Key6_KeyCode;				  }				 } 				  else				 { 				/* Validate key Key9   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key9_LoLimit )				  {					KeyCode = Key9_KeyCode;				  }				 } 			 } 		 } 		  else		 { 		  if (ADValue > Key2_HiLimit )			{			/* Validate key KeyHash   (make sure we are also above the lower A/D limit)  */			if (ADValue >= KeyHash_LoLimit )			  {				KeyCode = KeyHash_KeyCode;			  }			 } 			  else			 { 			  if (ADValue > Key5_HiLimit )				{				/* Validate key Key2   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key2_LoLimit )				  {					KeyCode = Key2_KeyCode;				  }				 } 				  else				 { 				/* Validate key Key5   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key5_LoLimit )				  {					KeyCode = Key5_KeyCode;				  }				 } 			 } 		 } 	 } 	  else	 { 	  if (ADValue > Key4_HiLimit )		{		  if (ADValue > Key0_HiLimit )			{			/* Validate key Key8   (make sure we are also above the lower A/D limit)  */			if (ADValue >= Key8_LoLimit )			  {				KeyCode = Key8_KeyCode;			  }			 } 			  else			 { 			  if (ADValue > Key1_HiLimit )				{				/* Validate key Key0   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key0_LoLimit )				  {					KeyCode = Key0_KeyCode;				  }				 } 				  else				 { 				/* Validate key Key1   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key1_LoLimit )				  {					KeyCode = Key1_KeyCode;				  }				 } 			 } 		 } 		  else		 { 		  if (ADValue > Key7_HiLimit )			{			/* Validate key Key4   (make sure we are also above the lower A/D limit)  */			if (ADValue >= Key4_LoLimit )			  {				KeyCode = Key4_KeyCode;			  }			 } 			  else			 { 			  if (ADValue > KeyAsterisk_HiLimit )				{				/* Validate key Key7   (make sure we are also above the lower A/D limit)  */				if (ADValue >= Key7_LoLimit )				  {					KeyCode = Key7_KeyCode;				  }				 } 				  else				 { 					KeyCode = KeyAsterisk_KeyCode;				 } 			 } 		 } 	 } }else{StableKeyCount = 0;return KeyNONE;}if (KeyCode == LastKeyCode){if (StableKeyCount >= KeyThreshold)  {  return KeyCode;  }else  {  StableKeyCount++;  return KeyNONE;  }}else{StableKeyCount = 0;LastKeyCode = KeyCode;return KeyNONE;}}